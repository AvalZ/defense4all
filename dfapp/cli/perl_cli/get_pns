#!/usr/bin/perl
#
# Copyright (c) <2013> <Radware Ltd.> and others.  All rights reserved.
#
# This program and the accompanying materials are made available under the terms of the Eclipse Public License
# v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html
# @author Konstantin Pozdeev
# @version 0.1
#
use strict;
use Getopt::Long;
use JSON ;
use LWP::UserAgent;
#use Data::Dumper;
#use feature 'say';


# setup my defaults
my $uri    = '/rest/app/df/pns';
my $rport      = 8086;
my $host = 'localhost';
my $help     = 0;
my $verbose;
my $json_out;
my $label;

sub usage {
   my $command = $0;
   $command =~ s#^.*/##;

   print STDERR (
      "usage: $command  [-p port] [-h hostname] [-u resource uri] [-json json format] [-v verbose mode] [-l pn label ]\n"
   );

   die("\n")
}
sub VERBOSE_OUT
{
    if ( defined $verbose ) {
	print @_;
	print "\n";
    }
}


GetOptions(
    'port=i'  => \$rport,
    'host=s'  => \$host,
    'uri=s'   => \$uri, 
    'verbose' => \$verbose,
    'json'    => \$json_out,
    'label=s'  => \$label
) or usage;

# Set up the connectio
my $ua = LWP::UserAgent->new;

# Configurables  
my $endpoint = $host.':'.$rport;  
my $url = "http://".$endpoint.$uri;

if ( defined $label ) {
    $url =  $url."/".$label;
}

VERBOSE_OUT "URL : ".$url;

my $req = HTTP::Request->new(GET => $url);
#$req->content_type('application/json');
#$req->content($json);

# Perform a HTTP GET on this URI 
my $res = $ua->request( $req) ;

if ($res->is_success) {
       VERBOSE_OUT "Respose : ".$res->content;
} else {
        die $res->status_line."\n" ;
}

# Process the response
my $response = decode_json( $res->content );
if ( ! defined $response )  {
    die "Invalid respose format";
}

my $offset_step="  ";

if ( defined $json_out ) {
    JsonOut ( $response );
} else {
    HashOut (  $response, "", $offset_step );
}

sub HashOut () {
    my $hash_ref= shift;
    my $offset= shift;
    my $offset_step=shift;

    my %hash = %$hash_ref;
    foreach my $line (keys %hash ) {
      	if ( ref ( $hash{$line} ) eq 'HASH' ) {
	    print $offset."$line :\n";
	    HashOut( $hash{$line} , $offset.$offset_step, $offset_step );
	} else {
	    print $offset."$line : $hash{$line} \n";
	}
   }
}

sub JsonOut () {
    my $hash_ref= shift;

    my %hash = %$hash_ref;
    if ( defined $label ) {
	# one line output is expected
	my $json_str = encode_json (  $hash_ref  );
	print "$json_str\n";
    } else {
	# output for hash
	# one pn per line ( hash entry )
	foreach my $line (keys %hash ) {
	    my $json_str = encode_json (  $hash{$line} );
	    print "$json_str\n";
	}
    }
}
